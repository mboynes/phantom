// Generated by CoffeeScript 1.11.1
var Test, TestRunner, config, fs, page, runner, stringifyStackTrace, system, testable, tests;

page = require('webpage').create();

fs = require('fs');

system = require('system');

if (system.args.length === 1) {
  console.error('Usage: runner.js <config.json>');
  phantom.exit(1);
}

config = JSON.parse(fs.read(system.args[1]));

if (!((config != null) && (config.domain != null) && (config.pages != null) && config.pages.length)) {
  console.error('Invalid config file');
  phantom.exit(1);
}

stringifyStackTrace = function(trace) {
  var msgStack;
  msgStack = [];
  if (trace && trace.length) {
    msgStack.push('TRACE:');
    trace.forEach(function(t) {
      return msgStack.push(" -> " + (t.file || t.sourceURL) + ": " + t.line + " " + (t["function"] ? "(in function " + t["function"] + ")" : ''));
    });
  }
  return msgStack.join('\n');
};

phantom.onError = function(msg, trace) {
  return Runner.logError("PHANTOM ERROR: " + msg + "\n" + (stringifyStackTrace(trace)));
};

page.onError = function(msg, trace) {
  return Runner.logError("PAGE ERROR: " + msg + "\n" + (stringifyStackTrace(trace)));
};

Test = (function() {
  function Test(test, domain) {
    this.domain = domain;
    this.name = test.name, this.url = test.url;
  }

  Test.prototype.getUrl = function() {
    return "" + this.domain + this.url;
  };

  return Test;

})();

TestRunner = (function() {
  function TestRunner(tests1) {
    this.tests = tests1;
    this.currentTest = null;
    this.errors = [];
  }

  TestRunner.prototype.dequeue = function() {
    if (this.tests.length) {
      this.currentTest = this.tests.shift();
      return this.runTest();
    } else {
      return this.doneCallback();
    }
  };

  TestRunner.prototype.runTest = function() {
    var message;
    message = "Running " + this.currentTest.name + "...";
    return page.open(this.currentTest.getUrl(), (function(_this) {
      return function(status) {
        if (status !== "success") {
          _this.logError(status);
          console.error(message + " Failed!");
        } else {
          console.log(message + " Passed.");
        }
        return setTimeout(function() {
          return _this.dequeue();
        }, 100);
      };
    })(this));
  };

  TestRunner.prototype.logError = function(message) {
    return this.errors.push(this.currentTest.name + ": " + message);
  };

  TestRunner.prototype.process = function(doneCallback) {
    this.doneCallback = doneCallback;
    return this.dequeue();
  };

  return TestRunner;

})();

tests = (function() {
  var i, len, ref, results;
  ref = config.pages;
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    testable = ref[i];
    results.push(new Test(testable, config.domain));
  }
  return results;
})();

runner = new TestRunner(tests);

runner.process(function() {
  if (runner.errors.length) {
    console.error(runner.errors.join('\n'));
    return phantom.exit(1);
  } else {
    return phantom.exit();
  }
});
